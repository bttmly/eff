// Generated by CoffeeScript 1.7.1
(function() {
  var arity, binarity, binary, flip, nAry, swap, unarity, unary;

  nAry = function(n, fn) {
    switch (n) {
      case 0:
        return function() {
          return fn.call(this);
        };
      case 1:
        return function(a) {
          return fn.call(this, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(this, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(this, a, b, c);
        };
      case 4:
        return function(a, b, c, d) {
          return fn.call(this, a, b, c, d);
        };
      case 5:
        return function(a, b, c, d, e) {
          return fn.call(this, a, b, c, d, e);
        };
      case 6:
        return function(a, b, c, d, e, f) {
          return fn.call(this, a, b, c, d, e, f);
        };
      case 7:
        return function(a, b, c, d, e, f, g) {
          return fn.call(this, a, b, c, d, e, f, g);
        };
      case 8:
        return function(a, b, c, d, e, f, g, h) {
          return fn.call(this, a, b, c, d, e, f, g, h);
        };
      case 9:
        return function(a, b, c, d, e, f, g, h, i) {
          return fn.call(this, a, b, c, d, e, f, g, h, i);
        };
      case 10:
        return function(a, b, c, d, e, f, g, h, i, j) {
          return fn.call(this, a, b, c, d, e, f, g, h, i, j);
        };
      default:
        throw new RangeError("Pass a function with length of 10 or less.");
    }
  };

  arity = function(n, fn) {
    switch (n) {
      case 0:
        (function() {
          return fn.apply(this, arguments_);
        });
        break;
      case 1:
        (function(a) {
          return fn.apply(this, arguments_);
        });
        break;
      case 2:
        (function(a, b) {
          return fn.apply(this, arguments_);
        });
        break;
      case 3:
        (function(a, b, c) {
          return fn.apply(this, arguments_);
        });
        break;
      case 4:
        (function(a, b, c, d) {
          return fn.apply(this, arguments_);
        });
        break;
      case 5:
        (function(a, b, c, d, e) {
          return fn.apply(this, arguments_);
        });
        break;
      case 6:
        (function(a, b, c, d, e, f) {
          return fn.apply(this, arguments_);
        });
        break;
      case 7:
        (function(a, b, c, d, e, f, g) {
          return fn.apply(this, arguments_);
        });
        break;
      case 8:
        (function(a, b, c, d, e, f, g, h) {
          return fn.apply(this, arguments_);
        });
        break;
      case 9:
        (function(a, b, c, d, e, f, g, h, i) {
          return fn.apply(this, arguments_);
        });
        break;
      case 10:
        (function(a, b, c, d, e, f, g, h, i, j) {
          return fn.apply(this, arguments_);
        });
        break;
      default:
        throw new RangeError("Pass a function with length of 10 or less.");
    }
  };

  unary = function(fn) {
    return function(a) {
      return fn.call(this, a);
    };
  };

  binary = function(fn) {
    return function(a, b) {
      return fn.call(this, a, b);
    };
  };

  unarity = function(fn) {
    return function(a) {
      return fn.apply(this, arguments_);
    };
  };

  binarity = function(fn) {
    return function(a, b) {
      return fn.apply(this, arguments_);
    };
  };

  swap = function(fn, pos1, pos2) {};

  flip = function(fn, all) {
    var func;
    func = void 0;
    if (all) {
      func = function() {
        var a, args, b, i, len, temp;
        a = void 0;
        b = void 0;
        temp = void 0;
        len = arguments_.length;
        args = new Array(arguments_.length);
        i = 0;
        while (i < len) {
          args[i] = arguments_[i];
          i++;
        }
        a = args.shift();
        b = args.shift();
        args.unshift(a);
        args.unshift(b);
        return fn.call(this, args);
      };
    }
    return func;
  };

}).call(this);
